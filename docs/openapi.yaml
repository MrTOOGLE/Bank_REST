openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/v1/users/{id}/role:
    put:
      tags:
      - user-controller
      operationId: updateUserRole
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRoleRequest'
        required: true
      responses:
        "204":
          description: No Content
  /api/v1/cards/{id}/status:
    put:
      tags:
      - card-controller
      operationId: setStatus
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetCardStatusRequest'
        required: true
      responses:
        "204":
          description: No Content
  /api/v1/cards/{id}/block:
    put:
      tags:
      - card-controller
      operationId: setBlock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
  /api/v1/users:
    get:
      tags:
      - user-controller
      operationId: getUsers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
    post:
      tags:
      - user-controller
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        "201":
          description: Created
  /api/v1/transfers:
    post:
      tags:
      - transfer-controller
      operationId: transfers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
        required: true
      responses:
        "204":
          description: No Content
  /api/v1/cards:
    get:
      tags:
      - card-controller
      operationId: getCards
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageCardDto'
    post:
      tags:
      - card-controller
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCardRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/auth/register:
    post:
      tags:
      - auth-controller
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        "201":
          description: Created
  /api/v1/auth/login:
    post:
      tags:
      - auth-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/v1/cards/{id}/balance:
    get:
      tags:
      - card-controller
      operationId: getBalance
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: number
  /api/v1/cards/my/full:
    get:
      tags:
      - card-controller
      operationId: getMyCardsWithFullNumbers
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageFullCardDto'
  /api/v1/users/{id}:
    delete:
      tags:
      - user-controller
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
  /api/v1/cards/{id}:
    delete:
      tags:
      - card-controller
      operationId: deleteCard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
components:
  schemas:
    UpdateUserRoleRequest:
      required:
      - role
      type: object
      properties:
        role:
          type: string
          enum:
          - ADMIN
          - USER
    SetCardStatusRequest:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
    CreateUserRequest:
      required:
      - email
      - name
      - password
      - role
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        password:
          maxLength: 2147483647
          minLength: 6
          type: string
        role:
          type: string
          enum:
          - ADMIN
          - USER
    TransferRequest:
      required:
      - fromCardNumber
      - toCardNumber
      type: object
      properties:
        fromCardNumber:
          type: string
        toCardNumber:
          type: string
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
    CreateCardRequest:
      required:
      - userId
      type: object
      properties:
        userId:
          type: integer
          format: int64
    RegisterRequest:
      required:
      - email
      - name
      - password
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        password:
          maxLength: 2147483647
          minLength: 6
          type: string
    LoginRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          maxLength: 2147483647
          minLength: 6
          type: string
    AuthResponse:
      type: object
      properties:
        token:
          type: string
    CardDto:
      type: object
      properties:
        cardNumber:
          type: string
        cardId:
          type: string
        validityPeriod:
          type: string
          format: date
        status:
          type: string
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
        ownerName:
          type: string
        ownerEmail:
          type: string
        ownerId:
          type: string
        balance:
          type: number
    UserDto:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        role:
          type: string
        cards:
          type: array
          items:
            $ref: '#/components/schemas/CardDto'
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    PageCardDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    FullCardDto:
      type: object
      properties:
        cardNumber:
          type: string
        validityPeriod:
          type: string
          format: date
        status:
          type: string
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
        ownerName:
          type: string
        balance:
          type: number
    PageFullCardDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/FullCardDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
